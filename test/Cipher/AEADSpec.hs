{-# LANGUAGE OverloadedStrings #-}

module Cipher.AEADSpec where

import Test.Hspec

import Ageha.Cipher.AEAD

spec :: Spec
spec = do
    -- Test vector from RFC 7539
    describe "ChaCha20Poly1305" $ do
        it "can encrypt/decrypt" $ do
            let pt =
                    "\x4c\x61\x64\x69\x65\x73\x20\x61\x6e\x64\x20\x47\x65\x6e\x74\x6c\x65\x6d\x65\x6e\x20\x6f\x66\x20\x74\x68\x65\x20\x63\x6c\x61\x73\x73\x20\x6f\x66\x20\x27\x39\x39\x3a\x20\x49\x66\x20\x49\x20\x63\x6f\x75\x6c\x64\x20\x6f\x66\x66\x65\x72\x20\x79\x6f\x75\x20\x6f\x6e\x6c\x79\x20\x6f\x6e\x65\x20\x74\x69\x70\x20\x66\x6f\x72\x20\x74\x68\x65\x20\x66\x75\x74\x75\x72\x65\x2c\x20\x73\x75\x6e\x73\x63\x72\x65\x65\x6e\x20\x77\x6f\x75\x6c\x64\x20\x62\x65\x20\x69\x74\x2e"
                key =
                    Key
                        "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"

                nonce = Nonce "\x07\x00\x00\x00\x40\x41\x42\x43\x44\x45\x46\x47"
                aad = AAD "\x50\x51\x52\x53\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7"
            enc <- aeadInitEncrypt ChaCha20Poly1305 key
            dec <- aeadInitDecrypt ChaCha20Poly1305 key
            ct <- aeadEncrypt enc nonce aad pt
            pt' <- aeadDecrypt dec nonce aad ct
            pt' `shouldBe` pt

    -- Test vector from RFC 7714
    describe "AES128GCM" $ do
        it "can encrypt/decrypt" $ do
            let pt =
                    "\x47\x61\x6c\x6c\x69\x61\x20\x65\x73\x74\x20\x6f\x6d\x6e\x69\x73\x20\x64\x69\x76\x69\x73\x61\x20\x69\x6e\x20\x70\x61\x72\x74\x65\x73\x20\x74\x72\x65\x73"
                key =
                    Key "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"

                nonce = Nonce "\x51\x75\x3c\x65\x80\xc2\x72\x6f\x20\x71\x84\x14"
                aad = AAD "\x80\x40\xf1\x7b\x80\x41\xf8\xd3\x55\x01\xa0\xb2"
            enc <- aeadInitEncrypt AES128GCM key
            dec <- aeadInitDecrypt AES128GCM key
            ct <- aeadEncrypt enc nonce aad pt
            pt' <- aeadDecrypt dec nonce aad ct
            pt' `shouldBe` pt

    describe "AES256GCM" $ do
        it "can encrypt/decrypt" $ do
            let pt =
                    "\x47\x61\x6c\x6c\x69\x61\x20\x65\x73\x74\x20\x6f\x6d\x6e\x69\x73\x20\x64\x69\x76\x69\x73\x61\x20\x69\x6e\x20\x70\x61\x72\x74\x65\x73\x20\x74\x72\x65\x73"
                key =
                    Key
                        "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
                nonce = Nonce "\x51\x75\x3c\x65\x80\xc2\x72\x6f\x20\x71\x84\x14"
                aad = AAD "\x80\x40\xf1\x7b\x80\x41\xf8\xd3\x55\x01\xa0\xb2"
            enc <- aeadInitEncrypt AES256GCM key
            dec <- aeadInitDecrypt AES256GCM key
            ct <- aeadEncrypt enc nonce aad pt
            pt' <- aeadDecrypt dec nonce aad ct
            pt' `shouldBe` pt
