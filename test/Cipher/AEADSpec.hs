{-# LANGUAGE OverloadedStrings #-}

module Cipher.AEADSpec where

import Data.ByteString
import Test.Hspec

import Ageha.Cipher.AEAD

-- Test vector from RFC 7539

spec :: Spec
spec = do
    describe "ChaCha20Poly1305" $ do
        it "can encrypt/decrypt" $ do
            enc <- aeadInitEncrypt ChaCha20Poly1305 k
            dec <- aeadInitDecrypt ChaCha20Poly1305 k
            c <- aeadEncrypt enc n a p
            p' <- aeadDecrypt dec n a c
            p' `shouldBe` p

p :: ByteString
p =
    "\x4c\x61\x64\x69\x65\x73\x20\x61\x6e\x64\x20\x47\x65\x6e\x74\x6c\x65\x6d\x65\x6e\x20\x6f\x66\x20\x74\x68\x65\x20\x63\x6c\x61\x73\x73\x20\x6f\x66\x20\x27\x39\x39\x3a\x20\x49\x66\x20\x49\x20\x63\x6f\x75\x6c\x64\x20\x6f\x66\x66\x65\x72\x20\x79\x6f\x75\x20\x6f\x6e\x6c\x79\x20\x6f\x6e\x65\x20\x74\x69\x70\x20\x66\x6f\x72\x20\x74\x68\x65\x20\x66\x75\x74\x75\x72\x65\x2c\x20\x73\x75\x6e\x73\x63\x72\x65\x65\x6e\x20\x77\x6f\x75\x6c\x64\x20\x62\x65\x20\x69\x74\x2e"

a :: ByteString
a = "\x50\x51\x52\x53\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7"

k :: ByteString
k =
    "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"

n :: ByteString
n = "\x07\x00\x00\x00\x40\x41\x42\x43\x44\x45\x46\x47"
